var fs = require('fs');
var path = require('path');
/****NODE SERVER RENDERER */
var Vue = require('vue'),
    LRU = require('lru-cache'),
    serverRenderer = require('vue-server-renderer'),
    setupDevServer = require('../build/setup-dev-server.js'),
    { createBundleRenderer } = serverRenderer,
    // createAppH5 = require('./server-app-h5.js'),
    resolve = file => path.resolve(__dirname, file),
    templateH5 = fs.readFileSync(resolve('../server-renderer/editorPC/h5/m_index.html'), 'utf-8'),
    isProd = process.env.NODE_ENV === 'production',
    // renderH5Path: 渲染H5时，替换编辑页面用到的http://localhost:9000/
    renderH5Path = isProd ? 'http://topic.lagou.com/v3/' : '/'
/****NODE SERVER RENDERER */

function writeFile(path,string,saveDone,status){
    switch(status){
        case 200:
            break
        default:
            saveDone(status)
            break
    }
    fs.writeFile(path,string,function(err) {
        if(err) {
            return console.log(err);
        }
        console.log('UPDATE H5: '+path);
        switch(status){
            case 200:
                console.log('移动端保存成功！')
                saveDone(status)
                break
        }
    });
}

function createRenderer (bundle, options) {
	return createBundleRenderer(bundle, Object.assign(options, {
        template:templateH5,// （可选）页面模板
        inject: false,
		// for component caching
		cache: LRU({
			max: 1000,
			maxAge: 1000 * 60 * 15
		}),
		// this is only needed when vue-server-renderer is npm-linked
		basedir: resolve('./dist'),
		// recommended for performance
		runInNewContext: false
	}))
}

function render (filename,filePath,pagedata,data,renderer,res,saveDone) {
	const s = Date.now()
    console.log('H5 Rendering '+filename)
	const handleError = err => {
		if(err.code === 404) {
            writeFile(filePath,'404 | Page Not Found',saveDone,404)
            // res.json({
            //     state:404,
            //     success:true,
            //     message:'页面不存在'
            // });
            // saveDone(404)
		} else {
			// Render Error Page or Redirect
            writeFile(filePath,'500 | Internal Server Error',saveDone,500)
            // res.json({
            //     state:200,
            //     success:true,
            //     message:'页面渲染失败'
            // });
            // saveDone(500)
		}
	}
    console.log('Starting to render H5 ......')
	renderer.renderToString({
        filename,
        pagedata,
        data
    }, (err, html) => {
		if (err) {
            console.log(err)
			return handleError(err)
        }
        writeFile(filePath,html.replace(/(http:\/\/localhost:9000\/)/g,renderH5Path),saveDone,200)
        // console.log('移动端保存成功！')
        // saveDone(200)
        // res.json({
        //     state:200,
        //     success:true,
        //     message:'保存成功'
        // });
		if (!isProd) {
			console.log(`whole request: ${Date.now() - s}ms`)
		}
	})
}

module.exports = function writeHTMLH5(router,filename,filePath,pagedata,data,res,saveDone){
    let renderer = null,
        readyPromise
    if(isProd){
        // In production: create server renderer using built server bundle.
        // The server bundle is generated by vue-ssr-webpack-plugin.
        const bundle = require(path.resolve(__dirname,'../dist/editorPC/js-h5/vue-ssr-server-bundle.json'))
        // The client manifests are optional, but it allows the renderer
        // to automatically infer preload/prefetch links and directly add <script>
        // tags for any async chunks used during render, avoiding waterfall requests.
        const clientManifest = require(path.resolve(__dirname,'../dist/editorPC/js-h5/vue-ssr-client-manifest.json'))
        renderer = createRenderer(bundle, {
            clientManifest
        })
        render(filename,filePath,pagedata,JSON.parse(data),renderer,res,saveDone)
    } else {
        readyPromise = setupDevServer(router,'h5', (bundle, options) => {
            renderer = createRenderer(bundle, options)
        })
        console.log('Start writing HTML h5......')
        readyPromise.then(() => {
            render(filename,filePath,pagedata,JSON.parse(data),renderer,res,saveDone)
        })
    }
}